syntax = "proto3";

package order;

option go_package = "shared/proto/order;order";

// ---- Service ----

service OrderService {
  rpc GetOrderById(GetOrderByIdRequest) returns (GetOrderByIdResponse);
  rpc GetOrders(GetOrdersRequest) returns (GetOrdersResponse);
}

// ---- Requests ----

message GetOrderByIdRequest {
  int32 order_id = 1;
}

message GetOrdersRequest {
  Pagination pagination = 1;
  OrderFilter filter = 2;
}
message Pagination {
  int32 limit = 1;
  int32 offset = 2;
}

message OrderFilter {
  string status = 1;     // model.OrderStatus (e.g., "pending/unpaid", "paid", etc.)
  int32 user_id = 2;
  int32 store_id = 3;
  int32 product_id = 4;
}


// ---- Responses ----

message GetOrderByIdResponse {
  Order order = 1;
}

message GetOrdersResponse {
  repeated OrderListItem orders = 1;
  int32 total = 2;
}

// ---- Messages ----

message OrderListItem {
  int32 id = 1;
  int32 user_id = 2;
  string status = 3;
  int32 item_count = 4;
  bool is_paid = 5;
  bool is_canceled = 6;
  string paid_at = 7;      // ISO8601 or RFC3339 timestamp as string
  string canceled_at = 8;
  string created_at = 9;
  string updated_at = 10;
}

message Order {
  int32 id = 1;
  int32 user_id = 2;
  string status = 3;
  bool is_paid = 4;
  bool is_canceled = 5;
  string paid_at = 6;
  string canceled_at = 7;
  string created_at = 8;
  string updated_at = 9;
  repeated OrderItem items = 10;
}

message OrderItem {
  int32 id = 1;
  int32 product_id = 2;
  int32 store_id = 3;
  int32 quantity = 4;
  string status = 5;       // Optional: if you track individual item status
  string created_at = 6;
  string updated_at = 7;
}
