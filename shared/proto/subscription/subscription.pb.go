// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.1
// source: proto/subscription.proto

package subscription

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MarkVendorSubscriptionAsPaidRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId int64                  `protobuf:"varint,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkVendorSubscriptionAsPaidRequest) Reset() {
	*x = MarkVendorSubscriptionAsPaidRequest{}
	mi := &file_proto_subscription_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkVendorSubscriptionAsPaidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkVendorSubscriptionAsPaidRequest) ProtoMessage() {}

func (x *MarkVendorSubscriptionAsPaidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_subscription_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkVendorSubscriptionAsPaidRequest.ProtoReflect.Descriptor instead.
func (*MarkVendorSubscriptionAsPaidRequest) Descriptor() ([]byte, []int) {
	return file_proto_subscription_proto_rawDescGZIP(), []int{0}
}

func (x *MarkVendorSubscriptionAsPaidRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

type VerifyVendorSubscriptionStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsValid       bool                   `protobuf:"varint,3,opt,name=isValid,proto3" json:"isValid,omitempty"`
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyVendorSubscriptionStatusResponse) Reset() {
	*x = VerifyVendorSubscriptionStatusResponse{}
	mi := &file_proto_subscription_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyVendorSubscriptionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyVendorSubscriptionStatusResponse) ProtoMessage() {}

func (x *VerifyVendorSubscriptionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_subscription_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyVendorSubscriptionStatusResponse.ProtoReflect.Descriptor instead.
func (*VerifyVendorSubscriptionStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_subscription_proto_rawDescGZIP(), []int{1}
}

func (x *VerifyVendorSubscriptionStatusResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *VerifyVendorSubscriptionStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type VerifyVendorSubscriptionStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VendorId      int64                  `protobuf:"varint,3,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyVendorSubscriptionStatusRequest) Reset() {
	*x = VerifyVendorSubscriptionStatusRequest{}
	mi := &file_proto_subscription_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyVendorSubscriptionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyVendorSubscriptionStatusRequest) ProtoMessage() {}

func (x *VerifyVendorSubscriptionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_subscription_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyVendorSubscriptionStatusRequest.ProtoReflect.Descriptor instead.
func (*VerifyVendorSubscriptionStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_subscription_proto_rawDescGZIP(), []int{2}
}

func (x *VerifyVendorSubscriptionStatusRequest) GetVendorId() int64 {
	if x != nil {
		return x.VendorId
	}
	return 0
}

type CreateVendorSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VendorId      int64                  `protobuf:"varint,3,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	PlanId        int64                  `protobuf:"varint,4,opt,name=planId,proto3" json:"planId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVendorSubscriptionRequest) Reset() {
	*x = CreateVendorSubscriptionRequest{}
	mi := &file_proto_subscription_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVendorSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVendorSubscriptionRequest) ProtoMessage() {}

func (x *CreateVendorSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_subscription_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVendorSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateVendorSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_proto_subscription_proto_rawDescGZIP(), []int{3}
}

func (x *CreateVendorSubscriptionRequest) GetVendorId() int64 {
	if x != nil {
		return x.VendorId
	}
	return 0
}

func (x *CreateVendorSubscriptionRequest) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

type VendorSubscription struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlanId          int64                  `protobuf:"varint,2,opt,name=planId,proto3" json:"planId,omitempty"`
	VendorId        int64                  `protobuf:"varint,3,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	ExpiresAt       string                 `protobuf:"bytes,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	LimitExceededAt string                 `protobuf:"bytes,5,opt,name=limit_exceeded_at,json=limitExceededAt,proto3" json:"limit_exceeded_at,omitempty"`
	CreatedAt       string                 `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       string                 `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	HasPaid         bool                   `protobuf:"varint,8,opt,name=hasPaid,proto3" json:"hasPaid,omitempty"`
	PaidAt          string                 `protobuf:"bytes,9,opt,name=paid_at,json=paidAt,proto3" json:"paid_at,omitempty"`
	Plan            *VendorPlan            `protobuf:"bytes,10,opt,name=plan,proto3" json:"plan,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VendorSubscription) Reset() {
	*x = VendorSubscription{}
	mi := &file_proto_subscription_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorSubscription) ProtoMessage() {}

func (x *VendorSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_subscription_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorSubscription.ProtoReflect.Descriptor instead.
func (*VendorSubscription) Descriptor() ([]byte, []int) {
	return file_proto_subscription_proto_rawDescGZIP(), []int{4}
}

func (x *VendorSubscription) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VendorSubscription) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *VendorSubscription) GetVendorId() int64 {
	if x != nil {
		return x.VendorId
	}
	return 0
}

func (x *VendorSubscription) GetExpiresAt() string {
	if x != nil {
		return x.ExpiresAt
	}
	return ""
}

func (x *VendorSubscription) GetLimitExceededAt() string {
	if x != nil {
		return x.LimitExceededAt
	}
	return ""
}

func (x *VendorSubscription) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *VendorSubscription) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *VendorSubscription) GetHasPaid() bool {
	if x != nil {
		return x.HasPaid
	}
	return false
}

func (x *VendorSubscription) GetPaidAt() string {
	if x != nil {
		return x.PaidAt
	}
	return ""
}

func (x *VendorSubscription) GetPlan() *VendorPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

type VendorPlan struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Amount        int64                  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorPlan) Reset() {
	*x = VendorPlan{}
	mi := &file_proto_subscription_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorPlan) ProtoMessage() {}

func (x *VendorPlan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_subscription_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorPlan.ProtoReflect.Descriptor instead.
func (*VendorPlan) Descriptor() ([]byte, []int) {
	return file_proto_subscription_proto_rawDescGZIP(), []int{5}
}

func (x *VendorPlan) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VendorPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VendorPlan) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_proto_subscription_proto protoreflect.FileDescriptor

var file_proto_subscription_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x23, 0x4d, 0x61, 0x72, 0x6b,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x73, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x26, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x43, 0x0a, 0x25, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22,
	0xc2, 0x02, 0x0a, 0x12, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x50, 0x61, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x50, 0x61, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x69, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04,
	0x70, 0x6c, 0x61, 0x6e, 0x22, 0x48, 0x0a, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x85,
	0x03, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x1c, 0x4d, 0x61, 0x72, 0x6b, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x50,
	0x61, 0x69, 0x64, 0x12, 0x31, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x50, 0x61, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8b, 0x01, 0x0a, 0x1e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x28, 0x5a, 0x26, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x3b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_subscription_proto_rawDescOnce sync.Once
	file_proto_subscription_proto_rawDescData []byte
)

func file_proto_subscription_proto_rawDescGZIP() []byte {
	file_proto_subscription_proto_rawDescOnce.Do(func() {
		file_proto_subscription_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_subscription_proto_rawDesc), len(file_proto_subscription_proto_rawDesc)))
	})
	return file_proto_subscription_proto_rawDescData
}

var file_proto_subscription_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_subscription_proto_goTypes = []any{
	(*MarkVendorSubscriptionAsPaidRequest)(nil),    // 0: subscription.MarkVendorSubscriptionAsPaidRequest
	(*VerifyVendorSubscriptionStatusResponse)(nil), // 1: subscription.VerifyVendorSubscriptionStatusResponse
	(*VerifyVendorSubscriptionStatusRequest)(nil),  // 2: subscription.VerifyVendorSubscriptionStatusRequest
	(*CreateVendorSubscriptionRequest)(nil),        // 3: subscription.CreateVendorSubscriptionRequest
	(*VendorSubscription)(nil),                     // 4: subscription.VendorSubscription
	(*VendorPlan)(nil),                             // 5: subscription.VendorPlan
}
var file_proto_subscription_proto_depIdxs = []int32{
	5, // 0: subscription.VendorSubscription.plan:type_name -> subscription.VendorPlan
	3, // 1: subscription.SubscriptionService.CreateVendorSubscription:input_type -> subscription.CreateVendorSubscriptionRequest
	0, // 2: subscription.SubscriptionService.MarkVendorSubscriptionAsPaid:input_type -> subscription.MarkVendorSubscriptionAsPaidRequest
	2, // 3: subscription.SubscriptionService.VerifyVendorSubscriptionStatus:input_type -> subscription.VerifyVendorSubscriptionStatusRequest
	4, // 4: subscription.SubscriptionService.CreateVendorSubscription:output_type -> subscription.VendorSubscription
	4, // 5: subscription.SubscriptionService.MarkVendorSubscriptionAsPaid:output_type -> subscription.VendorSubscription
	1, // 6: subscription.SubscriptionService.VerifyVendorSubscriptionStatus:output_type -> subscription.VerifyVendorSubscriptionStatusResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_subscription_proto_init() }
func file_proto_subscription_proto_init() {
	if File_proto_subscription_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_subscription_proto_rawDesc), len(file_proto_subscription_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_subscription_proto_goTypes,
		DependencyIndexes: file_proto_subscription_proto_depIdxs,
		MessageInfos:      file_proto_subscription_proto_msgTypes,
	}.Build()
	File_proto_subscription_proto = out.File
	file_proto_subscription_proto_goTypes = nil
	file_proto_subscription_proto_depIdxs = nil
}
